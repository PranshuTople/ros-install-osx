# NOTE: These instructions do not represent a robust, self-troubleshooting install; they
# are definitely not suitable for dumping to a giant script and running as one. If you 
# use them, they should be run one at a time, with an eye out for errors or problems
# along the way.
#
# The #1 issue you are likely to encounter is with Homebrew or Python packages whose
# binary components link against system Python. This will result in runtime segfaults,
# especially in rviz. If you suspect this is occurring, you can attempt to remove and
# reinstall the offending packages, or go for the nuclear option--- empty your Cellar
# and site-packages folders and start over with brewed python from the beginning.

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# If a cleanup is necessary, proceed with extreme caution!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ROS_DISTRO=${ROS_DISTRO:-kinetic}
ROS_CONFIGURATION=${ROS_CONFIGURATION:-desktop_full}
ROS_EXTRA_PACKAGES=${ROS_EXTRA_PACKAGES:-}
ROS_INSTALL_DIR=${ROS_INSTALL_DIR:-/opt/ros/${ROS_DISTRO}}

# Homebrew
if ! hash brew 2>/dev/null; then
	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	echo export PATH='/usr/local/bin:$PATH' >> ~/.bash_profile
	source ~/.bash_profile
	brew doctor
fi
brew update

# XQuartz
if ! hash xquartz 2>/dev/null; then
	brew install caskroom/cask/brew-cask
	brew cask install xquartz
	echo "Log out and in to finalize XQuartz setup."
	exit 0
fi

# Check for pip packages in the system Python directory.
if [ $(ls /Library/Python/2.7/site-packages/ | wc -l) -gt 1 ]; then
	echo "These instructions are about to install Python from Homebrew. However, there are already"
	echo "pip packages installed against the system python, in the following path:"
	echo
	echo "    /Library/Python/2.7/site-packages/"
	echo
	echo "If you have problems, please uninstall these packages:"
	echo
	echo "    for i in \$( pip freeze ); do sudo -H pip uninstall -y \$i; done"
	echo
	echo "Then delete the build directory and start over again from scratch."
fi

# Check for root-owned stuff in /usr/local
if [ $(find /usr/local/* -maxdepth 3 -type d -user root | wc -l) -gt 1 ]; then
	echo "Looks like you have some stuff owned by the root user in /usr/local. The installation can"
	echo "continue, but if there are pip packages which were installed using sudo, this will be a"
	echo "problem if rosdep tries to update them. If you have issues installing dependencies, consider"
	echo "nuking your Homebrew installation and starting from scratch:"
	echo
	echo "    https://gist.github.com/mxcl/1173223"
	echo
	echo "Alternatively, you could try chowning the contents of /usr/local to yourself:"
	echo
	echo "    sudo chown -R $USER:admin /usr/local/*"
fi

# Brewed Python
if [ $(which python) != "/usr/local/bin/python" ]; then
	brew install python
	mkdir -p ~/Library/Python/2.7/lib/python/site-packages
	echo "$(brew --prefix)/lib/python2.7/site-packages" >> ~/Library/Python/2.7/lib/python/site-packages/homebrew.pth
fi

# ros
brew tap ros/deps

# This tap gives us formulae for Gazebo and its dependencies, including SDF.
brew tap osrf/simulation

# Homebrew science gives us vtk and PCL, among other things.
brew tap homebrew/science

echo "Installing brew software"

# fixes some compiling errors (will take awhile to compile)
brew install cmake --HEAD || true

# boost 1.59 is needed since not everything has been updated for 1.65 (also a long compile)
brew install boost@1.59 --c++11 --with-icu4c
brew install boost-python@1.59

# use gazebo8 and ogre1.9 for consistency with rviz
brew install ogre1.9
brew install gazebo8 || true

brew install libyaml || true
brew install qt pyqt || true
# brew link qt5 --force || true

 # Remove previous workspace if present, create and enter new one.
WS=${ROS_DISTRO}_${ROS_CONFIGURATION}_ws
if [ -d "$WS" ]; then
rm -rf "$WS"
fi
mkdir $WS
pushd $WS

# Install the ROS infrastructure tools, you may have to run this several times until all python deps are properly installed
sudo -H pip install -U setuptools rosdep rosinstall_generator wstool rosinstall catkin_tools catkin_pkg bloom empy sphinx

# Download ROS sources
rosinstall_generator ${ROS_CONFIGURATION} --rosdistro kinetic --deps > kinetic.rosinstall
rosinstall_generator geometry2 --rosdistro kinetic --deps > geometry2.rosinstall
rosinstall_generator class_loader --rosdistro kinetic --upstream-development > class_loader.rosinstall
rosinstall_generator rospack --rosdistro lunar --upstream-development > rospack.rosinstall
rosinstall_generator rviz --rosdistro kinetic --upstream-development > rviz.rosinstall
rosinstall_generator gazebo_ros_control --rosdistro kinetic --deps-only --deps --deps-depth 1 --exclude gazebo_dev gazebo_ros > gazebo8_ros_pkgs_deps.rosinstall
rosinstall_generator realtime_tools ros_control --rosdistro kinetic --deps --deps-depth 1 > extra_deps.rosinstall

mkdir src
pushd src

wstool init

# base install
wstool merge -ry ../kinetic.rosinstall

# so that tf2 has tf2_tools
wstool merge -ry ../geometry2.rosinstall

# fix number of errors on compiling
wstool merge -ry ../class_loader.rosinstall

# load gazebo8 support packages
wstool set gazebo8_ros_pkgs --git https://github.com/osrf/gazebo8_ros_pkgs-release.git -v upstream/2.5.10 -y

# remove gazebo7 support
wstool remove gazebo_ros_pkgs/gazebo_ros_pkgs gazebo_ros_pkgs/gazebo_ros gazebo_ros_pkgs/gazebo_plugins gazebo_ros_pkgs/gazebo_msgs gazebo_ros_pkgs/gazebo_dev

# gazebo8 support packages deps
wstool merge -ry ../gazebo8_ros_pkgs_deps.rosinstall 

# 
wstool merge -ry ../rospack.rosinstall 

# need upstream-dev to fix compiling errors
wstool merge -ry ../rviz.rosinstall 

# some extra missing packages
wstool merge -ry ../extra_deps.rosinstall 

wstool update -j8

popd

# Initialize and update rosdep
if [ ! -d /etc/ros/rosdep/ ]; then
	echo "This sudo prompt is to initialize rosdep (creates the /etc/ros/rosdep path)."
	sudo rosdep init
fi
if [ ! -f /etc/ros/rosdep/10-ros-install-osx.list ]; then
	echo "This sudo prompt adds the the brewed python rosdep yaml to /etc/ros/rosdep/10-ros-install-osx.list."
	sudo sh -c "echo 'yaml https://raw.githubusercontent.com/smnogar/ros-install-osx/master/rosdeps.yaml osx' > /etc/ros/rosdep/sources.list.d/10-ros-install-osx.list"
fi

# # Install the necessary ROS dependencies
# sudo rosdep init
rosdep update
rosdep check --from-paths src --ignore-src --rosdistro kinetic --skip-keys="ppython-qt-bindings-qwt5 libqt5-core libqt5-gui libqt5-opengl libqt5-opengl-dev libqt5-widgets qt5-qmake qtbase5-dev python-imaging python-qt5-bindings python-qt5-bindings-gl python-qt5-bindings-webkit libogre-dev gazebo gazebo7 libgazebo7-dev" -y
rosdep install --from-paths src --ignore-src --rosdistro kinetic --skip-keys="ppython-qt-bindings-qwt5 libqt5-core libqt5-gui libqt5-opengl libqt5-opengl-dev libqt5-widgets qt5-qmake qtbase5-dev python-imaging python-qt5-bindings python-qt5-bindings-gl python-qt5-bindings-webkit libogre-dev gazebo gazebo7 libgazebo7-dev matplotlib" -y

# This patch originates from here: https://github.com/ros/catkin/pull/784
# this is necessary for python to find dylibs
if [ -d src/catkin ]; then
	pushd src/catkin/cmake
	curl https://raw.githubusercontent.com/ros/catkin/8a47f4eceb4954beb4a5b38b50793d0bbe2c96cf/cmake/catkinConfig.cmake.in > catkinConfig.cmake.in
	popd
fi

# this is importnat for python to work
ln -s /usr/local/share/sip/Qt5 /usr/local/share/sip/PyQt5

# this may help
# brew link --force qt5 && ln -s /usr/local/Cellar/qt5/5.4.0/mkspecs /usr/local/mkspecs && ln -s /usr/local/Cellar/qt5/5.4.0/plugins /usr/local/plugins


catkin config --install  --install-space /opt/ros/kinetic --cmake-args \
    -DCATKIN_ENABLE_TESTING=1 \
    -DCMAKE_BUILD_TYPE=Release \
    -DPYTHON_LIBRARY=$(python -c "import sys; print sys.prefix")/lib/libpython2.7.dylib \
    -DPYTHON_INCLUDE_DIR=$(python -c "import sys; print sys.prefix")/include/python2.7 \
    -DCMAKE_FIND_FRAMEWORK=LAST
catkin build


# Check for SIP if on OSX/macOS 10.11 (El Capitan) or later
if [[ `sw_vers -productVersion` > "10.10" ]]
then
	if `csrutil status | grep -q enabled`
	then
		echo "You have System Integrity Protection enabled."
		echo
		echo "This prevents DYLD_LIBRARY_PATH from being exported to subshells"
		echo "Please add: export DYLD_LIBRARY_PATH=\$DYLD_LIBRARY_PATH:/opt/ros/\$ROS_DISTRO/lib"
		echo "To the start of /opt/ros/$ROS_DISTRO/bin/rosrun to work around the issue."
	fi
fi